// Auto-generated from Python_Dictionary.md. Do not edit manually.
module.exports = [
  { token: '!=', type: 'operator', description: 'Inequality comparison. Checks whether two values are not equal.', example: 'print(5 != 3, 5 != 5)\n\n# results:\n# True False' },
  { token: '%', type: 'operator', description: 'Modulo. Remainder after division; sign matches the divisor in Python.', example: 'print(5 % 2)\nprint(-5 % 2)\n\n# results:\n# 1\n# 1' },
  { token: '%=', type: 'operator', description: 'In-place modulo and assign.', example: 'x = 5\nx %= 2\nprint(x)\n\n# results:\n# 1' },
  { token: '&', type: 'operator', description: 'Bitwise AND. Sets a bit if it is set in both operands.', example: 'print(5 & 3)\n\n# results:\n# 1' },
  { token: '&=', type: 'operator', description: 'In-place bitwise AND and assign.', example: 'x = 7  # 0b111\nx &= 3 # 0b011\nprint(x)\n\n# results:\n# 3' },
  { token: '(', type: 'operator', description: 'Parentheses. Group expressions and call functions.', example: 'print((5 + 3) * 2)\n\n# results:\n# 16' },
  { token: ')', type: 'operator', description: 'Closing parenthesis. Ends grouping or function call list.', example: 'print(len([1, 2, 3]))\n\n# results:\n# 3' },
  { token: '*', type: 'operator', description: 'Multiplication for numbers; sequence repetition for `str`, `list`, and `tuple`.', example: 'print(5 * 3)\nprint(\'ha\' * 3)\n\n# results:\n# 15\n# hahaha' },
  { token: '**', type: 'operator', description: 'Exponentiation (power). Right-associative: `2 ** 3 ** 2` is `2 ** (3 ** 2)`.', example: 'print(2 ** 3)\nprint(2 ** 3 ** 2)\n\n# results:\n# 8\n# 512' },
  { token: '**=', type: 'operator', description: 'In-place exponentiate and assign.', example: 'x = 2\nx **= 3\nprint(x)\n\n# results:\n# 8' },
  { token: '+', type: 'operator', description: 'Addition for numbers; concatenation for sequences like `str` and `list`.', example: 'print(5 + 3)\nprint(\'py\' + \'thon\')\n\n# results:\n# 8\n# python' },
  { token: '+=', type: 'operator', description: 'In-place add and assign. For mutable sequences, may modify in place.', example: 'x = 5\nx -= 3\nprint(x)\n\n# results:\n# 2' },
  { token: ',', type: 'operator', description: 'Comma. Separates items in lists, tuples, dicts, and function arguments.', example: 'def greet(name, age):\n    return f"{name}:{age}"\nprint(greet(\'Ada\', 30))\n\n# results:\n# Ada:30' },
  { token: '-', type: 'operator', description: 'Subtraction for numbers; unary minus negates a number.', example: 'print(5 - 3)\nprint(-(4))\n\n# results:\n# 2\n# -4' },
  { token: '-=', type: 'operator', description: 'In-place subtract and assign.', example: 'x = 5\nx *= 3\nprint(x)\n\n# results:\n# 15' },
  { token: '->', type: 'operator', description: 'Function return type annotation arrow. Documents or type-checks return value types.', example: 'print(... is Ellipsis)\n\n# results:\n# True' },
  { token: '.', type: 'operator', description: 'Dot. Attribute and method access.', example: 'class A:\n    def f(self):\n        return 1\nprint(A().f())\n\n# results:\n# 1' },
  { token: '...', type: 'operator', description: 'Ellipsis literal. Placeholder in code; used in advanced slicing and stubs.', example: 'x = 5\nx += 3\nprint(x)\n\nlst = [1]\nlst += [2]\nprint(lst)\n\n# results:\n# 8\n# [1, 2]' },
  { token: '/', type: 'operator', description: 'True division. Always returns a float.', example: 'print(5 / 2)\n\n# results:\n# 2.5' },
  { token: '//', type: 'operator', description: 'Floor division. Divides and rounds down to the nearest integer.', example: 'print(5 // 2)\nprint(-5 // 2)\n\n# results:\n# 2\n# -3' },
  { token: '//=', type: 'operator', description: 'In-place floor divide and assign.', example: 'x = 5\nx //= 2\nprint(x)\n\n# results:\n# 2' },
  { token: '/=', type: 'operator', description: 'In-place true divide and assign.', example: 'x = 5\nx /= 2\nprint(x)\n\n# results:\n# 2.5' },
  { token: ':', type: 'operator', description: 'Delimiter used in blocks (after `if`, `for`, `def`, etc.), dictionary pairs, and slicing.', example: 'data = {\'a\': 1, \'b\': 2}\nprint(data[\'a\'])\n\n# results:\n# 1' },
  { token: ';', type: 'operator', description: 'Semicolon. Allows multiple simple statements on one line (discouraged for readability).', example: 'x = 1; y = 2; print(x + y)\n\n# results:\n# 3' },
  { token: '<', type: 'operator', description: 'Less-than comparison.', example: 'print(5 < 3)\n\n# results:\n# False' },
  { token: '<<', type: 'operator', description: 'Bitwise left shift. Shifts bits left, filling with zeros.', example: 'print(5 << 1)\n\n# results:\n# 10' },
  { token: '<<=', type: 'operator', description: 'In-place left shift and assign.', example: 'x = 3\nx <<= 2\nprint(x)\n\n# results:\n# 12' },
  { token: '<=', type: 'operator', description: 'Less-than-or-equal comparison.', example: 'print(5 <= 3)\n\n# results:\n# False' },
  { token: '=', type: 'operator', description: 'Assignment. Binds a name to a value.', example: 'x = 5\nprint(x)\n\n# results:\n# 5' },
  { token: '==', type: 'operator', description: 'Equality comparison. Checks whether two values are equal.', example: 'print(5 == 5, 5 == 3)\n\n# results:\n# True False' },
  { token: '>', type: 'operator', description: 'Greater-than comparison.', example: 'print(5 > 3)\n\n# results:\n# True' },
  { token: '>=', type: 'operator', description: 'Greater-than-or-equal comparison.', example: 'print(5 >= 5)\n\n# results:\n# True' },
  { token: '>>', type: 'operator', description: 'Bitwise right shift. Shifts bits right; sign bit preserved for negatives.', example: 'print(5 >> 1)\n\n# results:\n# 2' },
  { token: '>>=', type: 'operator', description: 'In-place right shift and assign.', example: 'x = 12\nx >>= 2\nprint(x)\n\n# results:\n# 6' },
  { token: '@', type: 'operator', description: 'Decorator marker in front of function/class definitions to modify behavior.', example: 'def deco(fn):\n    def wrapped():\n        return \'wrapped \' + fn()\n    return wrapped\n\n@deco\ndef hello():\n    return \'hello\'\n\nprint(hello())\n\n# results:\n# wrapped hello' },
  { token: '@=', type: 'operator', description: 'In-place matrix multiply and assign (for array libraries).', example: '# Example shown conceptually without external libs\nacc = 0\nfor a, b in zip([1, 2], [3, 4]):\n    acc += a*b\nprint(acc)\n\n# results:\n# 11' },
  { token: '[', type: 'operator', description: 'Square bracket. List literals, indexing/slicing, and comprehensions.', example: 'arr = [1, 2, 3]\nprint(arr[0:2])\n\n# results:\n# [1, 2]' },
  { token: ']', type: 'operator', description: 'Closing square bracket.', example: 'print([x for x in range(3)])\n\n# results:\n# [0, 1, 2]' },
  { token: '^', type: 'operator', description: 'Bitwise XOR. Sets a bit if it differs between operands.', example: 'print(5 ^ 3)\n\n# results:\n# 6' },
  { token: '^=', type: 'operator', description: 'In-place bitwise XOR and assign.', example: 'x = 6  # 0b110\nx ^= 3 # 0b011\nprint(x)\n\n# results:\n# 5' },
  { token: '__import__', type: 'builtin', description: 'Low-level import function used by `import` statements. Rarely needed directly; can be used for dynamic imports.', example: 'math = __import__(\'math\')\nprint(math.sqrt(9))\n\n# results:\n# 3.0' },
  { token: 'abs', type: 'builtin', description: 'Returns the absolute value of a number. For integers and floats, it’s the distance from zero. For complex numbers, it returns the magnitude (length) of the vector.', example: 'print(abs(-7))\nprint(abs(3.5))\nprint(abs(3+4j))  # magnitude of the complex number\n\n# results:\n# 7\n# 3.5\n# 5.0' },
  { token: 'aiter', type: 'builtin', description: 'Returns an asynchronous iterator for an async iterable (like an async generator). Used in `async for` loops.', example: 'import asyncio\n\nasync def agen():\n    for i in range(3):\n        yield i\n\nasync def main():\n    async for v in aiter(agen()):\n        print(v)\n\n# asyncio.run(main())\n\n# results:\n# 0\n# 1\n# 2' },
  { token: 'all', type: 'builtin', description: 'Returns `True` if every element of the iterable is truthy (or if the iterable is empty). Stops early on the first falsey item.', example: 'print(all([True, True, 1]))\nprint(all([True, 0, 1]))\nprint(all([]))\n\n# results:\n# True\n# False\n# True' },
  { token: 'and', type: 'keyword', description: 'Logical AND. Returns the first falsey operand or the last operand if all are truthy.', example: 'print(True and 5)\nprint(0 and 5)\n\n# results:\n# 5\n# 0' },
  { token: 'anext', type: 'builtin', description: 'Awaits and returns the next item from an asynchronous iterator. Accepts a default to return when exhausted.', example: 'import asyncio\n\nasync def agen():\n    for i in range(2):\n        yield i\n\nasync def main():\n    it = aiter(agen())\n    print(await anext(it))\n    print(await anext(it, \'done\'))  # after last item\n\n# asyncio.run(main())\n\n# results:\n# 0\n# done' },
  { token: 'any', type: 'builtin', description: 'Returns `True` if any element of the iterable is truthy. Returns `False` for an empty iterable.', example: 'print(any([0, False, None, 3]))\nprint(any([0, False]))\nprint(any([]))\n\n# results:\n# True\n# False\n# False' },
  { token: 'ArithmeticError', type: 'builtin', description: 'Base class for arithmetic-related errors like division by zero, overflow, or invalid floating operations.', example: 'try:\n    1 / 0\nexcept ArithmeticError as e:\n    print("Arithmetic error:", e)\n\n# results:\n# Arithmetic error: division by zero' },
  { token: 'as', type: 'keyword', description: 'Gives an alias (alternate name), commonly in `import` and `with` statements.', example: 'import math as m\nprint(m.sqrt(9))\n\n# results:\n# 3.0' },
  { token: 'ascii', type: 'builtin', description: 'Returns a string with a printable ASCII representation of an object, escaping non-ASCII characters with backslash escapes.', example: 'print(ascii(\'ñ\'))\nprint(ascii({\'pi\': \'π\'}))\n\n# results:\n# \'\\\\xf1\'\n# {\'pi\': \'\\\\u03c0\'}' },
  { token: 'assert', type: 'keyword', description: 'Checks a condition; raises `AssertionError` if false. Good for sanity checks during development.', example: 'try:\n    assert 2 + 2 == 5, "bad math"\nexcept AssertionError as e:\n    print(e)\n\n# results:\n# bad math' },
  { token: 'AssertionError', type: 'builtin', description: 'An `assert` statement failed because the condition evaluated to `False`.', example: 'try:\n    assert 2 + 2 == 5, "math is hard"\nexcept AssertionError as e:\n    print("AssertionError:", e)\n\n# results:\n# AssertionError: math is hard' },
  { token: 'async', type: 'keyword', description: 'Marks a function as asynchronous (`async def`) so it returns a coroutine and can use `await`.', example: 'async def fetch():\n    return 42\nprint(fetch)  # calling needs an event loop\n\n# results:\n# <function ...>  # coroutine function object' },
  { token: 'AttributeError', type: 'builtin', description: 'Attribute reference or assignment failed (object does not have that attribute).', example: 'class Thing: pass\nt = Thing()\ntry:\n    print(t.missing)\nexcept AttributeError as e:\n    print("AttributeError:", e)\n\n# results:\n# AttributeError: \'Thing\' object has no attribute \'missing\'' },
  { token: 'await', type: 'keyword', description: 'Pauses inside an `async def` until the awaited coroutine/future completes and returns its result.', example: '# import asyncio\n# async def main():\n#     async def get(): return 3\n#     x = await get()\n#     print(x)\n# asyncio.run(main())\n\n# results:\n# 3' },
  { token: 'BaseException', type: 'builtin', description: 'The root of Python’s exception hierarchy. All exceptions inherit (directly or indirectly) from `BaseException`.', example: 'try:\n    raise BaseException("base problem")\nexcept BaseException as e:\n    print(type(e).__name__, str(e))\n\n# results:\n# BaseException base problem' },
  { token: 'bin', type: 'builtin', description: 'Converts an integer to its binary string prefixed with `0b` (or `-0b` for negatives).', example: 'print(bin(10))\nprint(bin(-10))\n\n# results:\n# 0b1010\n# -0b1010' },
  { token: 'bool', type: 'builtin', description: 'The boolean type with two values: `True` and `False`. `bool` is a subclass of `int`, so `True == 1` and `False == 0`, though identities differ. Used for conditions, comparisons, and logical operations.', example: 'print(isinstance(True, bool), isinstance(False, bool))\nprint(True + True, False + 5)\nprint(bool(0), bool(3), bool(""), bool("hi"))\n\n# results:\n# True True\n# 2 5\n# False True False True' },
  { token: 'break', type: 'keyword', description: 'Exits the nearest enclosing loop immediately.', example: 'for i in range(5):\n    print(i)\n    break\n\n# results:\n# 0' },
  { token: 'breakpoint', type: 'builtin', description: 'Drops into the debugger at the call site (uses `PYTHONBREAKPOINT` env var or `pdb.set_trace` by default). Helpful for interactive debugging.', example: '# breakpoint()\nprint("after breakpoint")\n\n# results:\n# [Would start debugger here]\n# after breakpoint' },
  { token: 'BufferError', type: 'builtin', description: 'Raised when a buffer-related operation cannot be performed (e.g., resizing a buffer that is exported).', example: 'b = bytearray(b"abc")\nmv = memoryview(b)\ntry:\n    b.extend(b"d")  # cannot resize while a view exists\nexcept BufferError as e:\n    print("BufferError:", e)\n\n# results:\n# BufferError: Existing exports of data: object cannot be re-sized' },
  { token: 'bytearray', type: 'builtin', description: 'A mutable sequence of bytes (integers 0–255). Good for in-place modifications of binary data (e.g., I/O buffers). Unlike `bytes`, contents can be changed.', example: 'barr = bytearray(b"hello")\nbarr[0] = ord(\'H\')\nbarr.append(33)  # \'!\' -> 33\nprint(barr, barr.decode())\n\n# results:\n# bytearray(b\'Hello!\') Hello!' },
  { token: 'bytes', type: 'builtin', description: 'An immutable sequence of bytes. Often used for binary files, network data, or encoded text (e.g., UTF-8). Cannot be changed after creation.', example: 'data = b"caf\\xc3\\xa9"  # "café" in UTF-8\nprint(data)\nprint(data.decode(\'utf-8\'))\n\n# results:\n# b\'caf\\xc3\\xa9\'\n# café' },
  { token: 'callable', type: 'builtin', description: 'Returns `True` if the object looks callable (like functions, methods, and instances defining `__call__`). Otherwise returns `False`.', example: 'def f():\n    pass\n\nprint(callable(f))\nprint(callable(42))\n\n# results:\n# True\n# False' },
  { token: 'case', type: 'keyword', description: 'Used inside a `match` block to define each pattern branch.', example: 'value = 3\nmatch value:\n    case 1:\n        print(\'one\')\n    case 2:\n        print(\'two\')\n    case _:\n        print(\'other\')\n\n# results:\n# other' },
  { token: 'chr', type: 'builtin', description: 'Returns the character corresponding to a Unicode code point (inverse of `ord`).', example: 'print(chr(97))\nprint(chr(8364))\n\n# results:\n# a\n# €' },
  { token: 'class', type: 'keyword', description: 'Defines a class (a blueprint for objects with data and behavior).', example: 'class Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def bark(self):\n        return "Woof!"\n\nd = Dog("Buddy")\nprint(d.name, d.bark())\n\n# results:\n# Buddy Woof!' },
  { token: 'classmethod', type: 'builtin', description: 'Decorator that makes a method receive the class (`cls`) instead of an instance (`self`). Useful for alternative constructors and class-wide operations.', example: 'class Person:\n    def __init__(self, name):\n        self.name = name\n\n    @classmethod\n    def from_first_last(cls, first, last):\n        return cls(f"{first} {last}")\n\np = Person.from_first_last(\'Ada\', \'Lovelace\')\nprint(p.name)\n\n# results:\n# Ada Lovelace' },
  { token: 'compile', type: 'builtin', description: 'Compiles source code into a code object that can be executed with `exec()` or evaluated with `eval()`.', example: 'code = compile(\'x + 1\', \'<expr>\', \'eval\')\nx = 41\nprint(eval(code))\n\n# results:\n# 42' },
  { token: 'complex', type: 'builtin', description: 'Numbers with a real and imaginary part, written as `a+bj` (note the `j`). Useful in math, signal processing, and scientific computing.', example: 'z = 3 + 4j\nprint(z.real, z.imag)\nprint(abs(z))  # magnitude\nprint((1+2j) * (2-3j))\n\n# results:\n# 3.0 4.0\n# 5.0\n# (8+1j)' },
  { token: 'continue', type: 'keyword', description: 'Skips the rest of the current loop iteration and continues with the next iteration.', example: 'for i in range(3):\n    if i == 1:\n        continue\n    print(i)\n\n# results:\n# 0\n# 2' },
  { token: 'def', type: 'keyword', description: 'Defines a function (reusable block of code).', example: 'def greet(name):\n    return f"Hello, {name}!"\n\nprint(greet("Alice"))\n\n# results:\n# Hello, Alice!' },
  { token: 'del', type: 'keyword', description: 'Deletes a reference, item, or slice from a collection (or a variable name).', example: 'd = {\'a\': 1, \'b\': 2}\ndel d[\'a\']\nprint(d)\n\n# results:\n# {\'b\': 2}' },
  { token: 'DeprecationWarning', type: 'builtin', description: 'Feature is deprecated and may be removed in a future version (intended for developers).', example: 'import warnings\nwarnings.warn("This feature is deprecated", DeprecationWarning)\n\n# results:\n# <stdin>:1: DeprecationWarning: This feature is deprecated' },
  { token: 'dict', type: 'builtin', description: 'A mapping of keys to values. Keys are unique and must be hashable (e.g., `str`, `int`, `tuple` of immutables). Insert order is preserved.', example: 'user = {"name": "Ada", "age": 36}\nuser["job"] = "Engineer"\nprint(user["name"], list(user.keys()))\n\n# results:\n# Ada [\'name\', \'age\', \'job\']' },
  { token: 'dir', type: 'builtin', description: 'Lists valid attributes for an object. With no argument, lists names in the current scope.', example: 'print(\'append\' in dir([]))\nprint(len(dir(str)) > 10)\n\n# results:\n# True\n# True' },
  { token: 'divmod', type: 'builtin', description: 'Takes two numbers and returns a tuple `(quotient, remainder)` using integer division. Useful for splitting a number into parts.', example: 'print(divmod(9, 2))\nprint(divmod(20, 6))\n\n# results:\n# (4, 1)\n# (3, 2)' },
  { token: 'elif', type: 'keyword', description: '“Else if” branch in a conditional chain after an `if`.', example: 'x = 0\nif x > 0:\n    print(\'positive\')\nelif x == 0:\n    print(\'zero\')\nelse:\n    print(\'negative\')\n\n# results:\n# zero' },
  { token: 'Ellipsis', type: 'builtin', description: 'The special singleton value written as `...`. Its type is `ellipsis`. It’s used by some libraries (like NumPy) for advanced slicing and is commonly used as a lightweight placeholder in code or stubs.', example: 'print(Ellipsis is ...)\nprint(type(...))\n\ndef stub_function():\n    return ...  # placeholder value\n\nprint(stub_function())\n\n# results:\n# True\n# <class \'ellipsis\'>\n# Ellipsis' },
  { token: 'else', type: 'keyword', description: 'The fallback branch for `if`/`elif`, or the branch after loops that didn’t `break`.', example: 'for i in range(1):\n    pass\nelse:\n    print(\'loop finished without break\')\n\n# results:\n# loop finished without break' },
  { token: 'enumerate', type: 'builtin', description: 'Adds an index (counter) to an iterable, yielding pairs `(index, item)`. Helpful when you need positions while looping.', example: 'fruits = [\'apple\', \'banana\', \'cherry\']\nfor idx, fruit in enumerate(fruits):\n    print(idx, fruit)\n\n# results:\n# 0 apple\n# 1 banana\n# 2 cherry' },
  { token: 'EOFError', type: 'builtin', description: '`input()` hit end-of-file (no more input) without reading any data.', example: 'try:\n    # data = input()  # send EOF (e.g., Ctrl+Z/Ctrl+D) to trigger\n    raise EOFError\nexcept EOFError:\n    print("EOFError: No input received")\n\n# results:\n# EOFError: No input received' },
  { token: 'eval', type: 'builtin', description: 'Evaluates a string as a Python expression and returns the result. Use carefully; avoid untrusted input.', example: 'x = 1\nprint(eval(\'x + 2\'))\n\n# results:\n# 3' },
  { token: 'except', type: 'keyword', description: 'Catches exceptions raised in the associated `try` block.', example: 'try:\n    1/0\nexcept ZeroDivisionError:\n    print(\'cannot divide by zero\')\n\n# results:\n# cannot divide by zero' },
  { token: 'Exception', type: 'builtin', description: 'Base class for most application-level errors. User-defined exceptions generally inherit from `Exception`, not `BaseException`.', example: 'try:\n    raise Exception("something went wrong")\nexcept Exception as e:\n    print(type(e).__name__, str(e))\n\n# results:\n# Exception something went wrong' },
  { token: 'exec', type: 'builtin', description: 'Executes dynamically built Python code. Supports multi-line code and definitions. Use carefully; avoid untrusted input.', example: 'program = """\ndef greet(name):\n    print(f\'Hello, {name}!\')\n\ngreet(\'World\')\n"""\nexec(program)\n\n# results:\n# Hello, World!' },
  { token: 'False', type: 'keyword', description: 'Boolean false value. Used in conditions and logic to represent “no”/“off”.', example: 'if False:\n    print("won\'t run")\nelse:\n    print("runs")\n\n# results:\n# runs' },
  { token: 'False_builtin', type: 'builtin', description: 'The boolean value for "no" or "off". `False` is a singleton of type `bool` (which is a subclass of `int`). In conditions, `False` is treated as falsey. Many other values are also falsey (like `0`, `0.0`, `\'\'`, `[]`, `{}`, `set()`, `None`), but they are not the same object as `False`.', example: 'print(False)\nprint(isinstance(False, bool))\nprint(False == 0, False is 0)  # equal in value to 0, but not the same object\n\nif False:\n    print("hidden")\nelse:\n    print("shown")\n\n# results:\n# False\n# True\n# True False\n# shown' },
  { token: 'FileNotFoundError', type: 'builtin', description: 'File or directory was requested but does not exist.', example: 'try:\n    open(\'missing.txt\')\nexcept FileNotFoundError as e:\n    print("FileNotFoundError:", e)\n\n# results:\n# FileNotFoundError: [Errno 2] No such file or directory: \'missing.txt\'' },
  { token: 'filter', type: 'builtin', description: 'Keeps items for which the function returns `True`. Produces an iterator; wrap with `list()` to see all results.', example: 'numbers = [1, 2, 3, 4, 5]\neven_numbers = filter(lambda x: x % 2 == 0, numbers)\nprint(list(even_numbers))\n\n# results:\n# [2, 4]' },
  { token: 'finally', type: 'keyword', description: 'A block that always runs after `try`/`except`, useful for cleanup.', example: 'try:\n    x = 1/0\nexcept ZeroDivisionError:\n    print(\'handled\')\nfinally:\n    print(\'cleanup\')\n\n# results:\n# handled\n# cleanup' },
  { token: 'float', type: 'builtin', description: 'Double-precision floating-point number (IEEE 754). Represents real numbers with decimals. Beware of rounding errors for some decimal fractions.', example: 'print(0.1 + 0.2)\nprint(round(0.1 + 0.2, 10))\n\n# results:\n# 0.30000000000000004\n# 0.3' },
  { token: 'FloatingPointError', type: 'builtin', description: 'Floating point operation failed at the C level (rare in pure Python). More commonly, overflow/underflow becomes `OverflowError` or silently rounds.', example: 'try:\n    raise FloatingPointError("floating point issue")\nexcept FloatingPointError as e:\n    print(type(e).__name__, e)\n\n# results:\n# FloatingPointError floating point issue' },
  { token: 'for', type: 'keyword', description: 'Loops over items of an iterable (like lists, strings, ranges).', example: 'for ch in \'hi\':\n    print(ch)\n\n# results:\n# h\n# i' },
  { token: 'format', type: 'builtin', description: 'Calls an object’s `__format__` method with a format spec. Useful for numbers, dates, and custom formatting.', example: 'print(format(255, \'x\'))   # hex\nprint(format(12.3456, \'.2f\'))\n\n# results:\n# ff\n# 12.35' },
  { token: 'from', type: 'keyword', description: 'Imports specific names from a module.', example: 'from math import sqrt\nprint(sqrt(16))\n\n# results:\n# 4.0' },
  { token: 'frozenset', type: 'builtin', description: 'An immutable set. Useful as dictionary keys or set elements when you need a hashable collection of unique items.', example: 'fs = frozenset([1, 2, 2, 3])\nprint(fs)\nprint({fs: "immutable set"}[fs])\n\n# results:\n# frozenset({1, 2, 3})\n# immutable set' },
  { token: 'FutureWarning', type: 'builtin', description: 'Warns about behavior that will change in a future Python version.', example: 'import warnings\nwarnings.warn("Behavior will change", FutureWarning)\n\n# results:\n# <stdin>:1: FutureWarning: Behavior will change' },
  { token: 'GeneratorExit', type: 'builtin', description: 'Sent to a generator to tell it to clean up and exit when `close()` is called or the generator is garbage-collected.', example: 'def gen():\n    try:\n        yield 1\n    finally:\n        print("generator closing")\n\ng = gen()\nprint(next(g))\ng.close()\n\n# results:\n# 1\n# generator closing' },
  { token: 'getattr', type: 'builtin', description: 'Gets an attribute by name from an object. Accepts a default to return if the attribute does not exist instead of raising `AttributeError`.', example: 'class Person:\n    species = \'Human\'\n\np = Person()\nprint(getattr(p, \'species\'))\nprint(getattr(p, \'age\', \'unknown\'))\n\n# results:\n# Human\n# unknown' },
  { token: 'global', type: 'keyword', description: 'Declares that a variable inside a function refers to a module-level (global) variable.', example: 'x = 1\ndef set_x():\n    global x\n    x = 99\nset_x()\nprint(x)\n\n# results:\n# 99' },
  { token: 'globals', type: 'builtin', description: 'Returns a dictionary representing the current global symbol table (module-level variables).', example: 'g = globals()\nprint(isinstance(g, dict))\nprint(\'__name__\' in g)\n\n# results:\n# True\n# True' },
  { token: 'hasattr', type: 'builtin', description: 'Checks whether an object has an attribute with the given name. Returns `True` or `False`.', example: 'class Box:\n    def __init__(self):\n        self.size = 3\n\nb = Box()\nprint(hasattr(b, \'size\'))\nprint(hasattr(b, \'color\'))\n\n# results:\n# True\n# False' },
  { token: 'hex', type: 'builtin', description: 'Converts an integer to a lowercase hexadecimal string prefixed with `0x` (or `-0x`).', example: 'print(hex(255))\nprint(hex(-16))\n\n# results:\n# 0xff\n# -0x10' },
  { token: 'id', type: 'builtin', description: 'Returns the “identity” of an object, which is an integer unique to the object during its lifetime.', example: 'a = object()\nb = a\nc = object()\nprint(id(a) == id(b), id(a) == id(c))\n\n# results:\n# True False' },
  { token: 'if', type: 'keyword', description: 'Starts a conditional block executed when its condition is truthy.', example: 'if 3 > 2:\n    print(\'yes\')\n\n# results:\n# yes' },
  { token: 'import', type: 'keyword', description: 'Imports a module so its contents can be accessed via the module name.', example: 'import math\nprint(math.pi > 3)\n\n# results:\n# True' },
  { token: 'ImportError', type: 'builtin', description: 'Import system couldn’t find a name in a module or had another import-related problem.', example: 'try:\n    from math import not_a_name\nexcept ImportError as e:\n    print("ImportError:", e)\n\n# results:\n# ImportError: cannot import name \'not_a_name\' from \'math\' (unknown location)' },
  { token: 'ImportWarning', type: 'builtin', description: 'Warnings related to the import system.', example: 'import warnings\nwarnings.warn("Import system detail", ImportWarning)\n\n# results:\n# <stdin>:1: ImportWarning: Import system detail' },
  { token: 'in', type: 'keyword', description: 'Tests membership in a container; also used in `for` loops.', example: 'print(2 in [1, 2, 3])\nprint(\'a\' in {\'a\': 1})\n\n# results:\n# True\n# True' },
  { token: 'IndentationError', type: 'builtin', description: 'Incorrect indentation of code blocks.', example: 'code = \'def f():\\nprint(1)\\n\'\ntry:\n    compile(code, \'<string>\', \'exec\')\nexcept IndentationError as e:\n    print("IndentationError:", e.msg)\n\n# results:\n# IndentationError: expected an indented block' },
  { token: 'IndexError', type: 'builtin', description: 'Subscript index is out of range for a sequence.', example: 'lst = [1, 2, 3]\ntry:\n    print(lst[5])\nexcept IndexError as e:\n    print("IndexError:", e)\n\n# results:\n# IndexError: list index out of range' },
  { token: 'input', type: 'builtin', description: 'Reads a line from standard input and returns it as a string (without the trailing newline). Optionally displays a prompt.', example: '# name = input("Enter your name: ")\n# print(f"Hello, {name}!")\n\n# results:\n# Enter your name: John\n# Hello, John!' },
  { token: 'int', type: 'builtin', description: 'Integer numbers of arbitrary size (limited by memory). Supports math operations, bit operations, and base conversions.', example: 'n = 12345678901234567890\nprint(n.bit_length())\nprint(int("ff", 16))  # hex to int\n\n# results:\n# 64  # exact bit length may vary with the number above\n# 255' },
  { token: 'is', type: 'keyword', description: 'Tests object identity (whether two names refer to the same object), not equality of values.', example: 'a = []\nb = []\nc = a\nprint(a == b, a is b, a is c)\n\n# results:\n# True False True' },
  { token: 'isinstance', type: 'builtin', description: 'Checks whether an object is an instance of a class or any subclass thereof. Accepts a tuple of classes to check against multiple types.', example: 'print(isinstance(5, int))\nprint(isinstance(True, (int, bool)))\n\n# results:\n# True\n# True' },
  { token: 'issubclass', type: 'builtin', description: 'Checks whether a class is a subclass of another class or any of its subclasses.', example: 'class A: pass\nclass B(A): pass\nprint(issubclass(B, A), issubclass(A, B))\n\n# results:\n# True False' },
  { token: 'iter', type: 'builtin', description: 'Returns an iterator from an iterable (like a list) or from a callable with a sentinel. Iterators produce items one by one with `next()`.', example: 'data = [10, 20, 30]\nit = iter(data)\nprint(next(it), next(it))\n\n# results:\n# 10 20' },
  { token: 'KeyboardInterrupt', type: 'builtin', description: 'Raised when the user interrupts program execution (usually Ctrl+C). Often used to stop long-running loops gracefully.', example: 'try:\n    # while True: pass  # Press Ctrl+C to interrupt\n    raise KeyboardInterrupt\nexcept KeyboardInterrupt:\n    print("Program interrupted by user")\n\n# results:\n# Program interrupted by user' },
  { token: 'KeyError', type: 'builtin', description: 'Requested key not found in a dictionary.', example: 'd = {\'a\': 1}\ntry:\n    print(d[\'b\'])\nexcept KeyError as e:\n    print("KeyError:", repr(e))\n\n# results:\n# KeyError: \'b\'' },
  { token: 'lambda', type: 'keyword', description: 'Creates a small anonymous function in a single expression.', example: 'square = lambda x: x * x\nprint(square(5))\n\n# results:\n# 25' },
  { token: 'len', type: 'builtin', description: 'Returns the number of items in a container (like lists, strings, dicts). Calls the object’s `__len__` method.', example: 'print(len([1, 2, 3]))\nprint(len("hello"))\n\n# results:\n# 3\n# 5' },
  { token: 'list', type: 'builtin', description: 'An ordered, mutable sequence. Supports indexing, slicing, and methods like `append`, `pop`, and `sort`. Can hold mixed types.', example: 'nums = [3, 1, 2]\nnums.append(5)\nnums.sort()\nprint(nums, nums[0], nums[-1])\n\n# results:\n# [1, 2, 3, 5] 1 5' },
  { token: 'locals', type: 'builtin', description: 'Returns a dictionary of the current local symbol table. Inside a function, includes the function’s local variables.', example: 'def demo():\n    x = 2\n    y = 3\n    d = locals()\n    return sorted(d.keys())\n\nprint(demo())\n\n# results:\n# [\'d\', \'x\', \'y\']' },
  { token: 'LookupError', type: 'builtin', description: 'Base class for index/key lookup errors like `IndexError` and `KeyError`.', example: 'try:\n    [][0]\nexcept LookupError as e:\n    print(type(e).__name__)\ntry:\n    {}[\'x\']\nexcept LookupError as e:\n    print(type(e).__name__)\n\n# results:\n# IndexError\n# KeyError' },
  { token: 'map', type: 'builtin', description: 'Applies a function to each item of one or more iterables, yielding the transformed results lazily.', example: 'numbers = [1, 2, 3, 4]\nsquared = map(lambda x: x * x, numbers)\nprint(list(squared))\n\n# results:\n# [1, 4, 9, 16]' },
  { token: 'match', type: 'keyword', description: 'Starts a structural pattern matching block (Python 3.10+), matching a value against patterns.', example: 'def kind(x):\n    match x:\n        case 0:\n            return \'zero\'\n        case 1 | 2:\n            return \'small\'\n        case _:\n            return \'other\'\n\nprint(kind(2))\n\n# results:\n# small' },
  { token: 'max', type: 'builtin', description: 'Returns the largest item from an iterable, or the largest of two or more arguments. Accepts a `key` function to customize comparisons.', example: 'print(max([3, 1, 5, 2]))\nwords = ["pear", "apple", "banana"]\nprint(max(words, key=len))  # by length\n\n# results:\n# 5\n# banana' },
  { token: 'MemoryError', type: 'builtin', description: 'The operation ran out of memory. Often indicates a huge allocation.', example: 'try:\n    raise MemoryError("not enough memory")\nexcept MemoryError as e:\n    print(type(e).__name__, e)\n\n# results:\n# MemoryError not enough memory' },
  { token: 'memoryview', type: 'builtin', description: 'A zero-copy “view” of a bytes-like object (e.g., `bytes`, `bytearray`). Lets you slice and, if the underlying object is mutable, modify data without creating new copies.', example: 'barr = bytearray(b"hello")\nmv = memoryview(barr)\nmv[0] = ord(\'H\')  # modify through the view\nprint(barr)\nprint(bytes(mv[1:4]))  # view slicing without copying the base\n\n# results:\n# bytearray(b\'Hello\')\n# b\'ell\'' },
  { token: 'min', type: 'builtin', description: 'Returns the smallest item from an iterable, or the smallest of two or more arguments. Accepts a `key` function to customize comparisons.', example: 'print(min([3, 1, 5, 2]))\nwords = ["pear", "apple", "banana"]\nprint(min(words, key=len))  # by length\n\n# results:\n# 1\n# pear' },
  { token: 'ModuleNotFoundError', type: 'builtin', description: 'Subclass of `ImportError` raised when a module can’t be found.', example: 'try:\n    import clearly_not_a_module\nexcept ModuleNotFoundError as e:\n    print("ModuleNotFoundError:", e)\n\n# results:\n# ModuleNotFoundError: No module named \'clearly_not_a_module\'' },
  { token: 'NameError', type: 'builtin', description: 'A variable or function name is not defined in the current scope.', example: 'try:\n    print(does_not_exist)\nexcept NameError as e:\n    print("NameError:", e)\n\n# results:\n# NameError: name \'does_not_exist\' is not defined' },
  { token: 'next', type: 'builtin', description: 'Gets the next item from an iterator. Optionally provide a default to avoid `StopIteration` when the iterator is exhausted.', example: 'it = iter([1, 2])\nprint(next(it))\nprint(next(it))\nprint(next(it, \'done\'))\n\n# results:\n# 1\n# 2\n# done' },
  { token: 'None', type: 'keyword', description: 'The “no value” object. Often used to mean “nothing”, “not set”, or “no result”.', example: 'result = None\nprint(result is None)\n\n# results:\n# True' },
  { token: 'None_builtin', type: 'builtin', description: 'The single value that represents “no value” or “nothing here”. `None` is the only instance of `NoneType`. Functions return `None` if they do not explicitly return something. Compare with `is` (identity), not `==`.', example: 'value = None\nprint(value is None)\nprint(bool(None))  # None is falsey\n\ndef do_nothing():\n    pass\n\nprint(do_nothing() is None)\n\n# results:\n# True\n# False\n# True' },
  { token: 'nonlocal', type: 'keyword', description: 'Refers to a variable in the nearest enclosing (but not global) scope.', example: 'def outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x = 2\n        return x\n    inner()\n    return x\n\nprint(outer())\n\n# results:\n# 2' },
  { token: 'not', type: 'keyword', description: 'Logical NOT. Returns `True` if the operand is falsey, otherwise `False`.', example: 'print(not True, not 0, not [])\n\n# results:\n# False True True' },
  { token: 'NotImplemented', type: 'builtin', description: 'A special singleton that binary special methods (like `__add__`, `__eq__`, etc.) should return to say “I don’t support this operation with that other type.” Python will then try the reflected method on the other object, and if neither supports it, a `TypeError` is raised. Do not confuse with `NotImplementedError` (an exception).', example: 'class Adder:\n    def __add__(self, other):\n        if isinstance(other, int):\n            return other + 10\n        return NotImplemented  # tell Python to try the other operand\'s __radd__\n\na = Adder()\nprint(a + 5)\n\ntry:\n    print(a + 2.5)  # float doesn\'t know how to add Adder either\nexcept TypeError as e:\n    print(type(e).__name__)\n\n# results:\n# 15\n# TypeError' },
  { token: 'NotImplementedError', type: 'builtin', description: 'Indicates a method is intended to be overridden in a subclass but hasn’t been implemented yet.', example: 'class Base:\n    def run(self):\n        raise NotImplementedError("subclass must implement run()")\n\ntry:\n    Base().run()\nexcept NotImplementedError as e:\n    print("NotImplementedError:", e)\n\n# results:\n# NotImplementedError: subclass must implement run()' },
  { token: 'object', type: 'builtin', description: 'The base class for all new-style classes in Python. Every object ultimately inherits from `object` and thus shares some minimal default behavior.', example: 'print(isinstance(42, object), isinstance([], object), isinstance(object(), object))\n\nclass Foo:  # implicitly inherits from object\n    pass\n\nf = Foo()\nprint(isinstance(f, object), issubclass(Foo, object))\n\n# results:\n# True True True\n# True True' },
  { token: 'oct', type: 'builtin', description: 'Converts an integer to an octal string prefixed with `0o` (or `-0o`).', example: 'print(oct(9))\nprint(oct(-9))\n\n# results:\n# 0o11\n# -0o11' },
  { token: 'open', type: 'builtin', description: 'Opens a file and returns a file object. Use modes like `\'r\'` (read), `\'w\'` (write, truncate), `\'a\'` (append), and `\'b\'` (binary). Prefer using a `with` block so the file closes automatically.', example: '# write\nwith open(\'example.txt\', \'w\', encoding=\'utf-8\') as f:\n    f.write(\'Hello, world!\')\n\n# read\nwith open(\'example.txt\', \'r\', encoding=\'utf-8\') as f:\n    content = f.read()\nprint(content)\n\n# results:\n# Hello, world!' },
  { token: 'or', type: 'keyword', description: 'Logical OR. Returns the first truthy operand or the last operand if all are falsey.', example: 'print(0 or \'fallback\')\nprint(\'x\' or \'y\')\n\n# results:\n# fallback\n# x' },
  { token: 'ord', type: 'builtin', description: 'Returns the Unicode code point for a single character string (inverse of `chr`).', example: 'print(ord(\'A\'))\nprint(ord(\'9\'))\n\n# results:\n# 65\n# 57' },
  { token: 'OSError', type: 'builtin', description: 'Base class for system-related errors (files, OS calls). Many specific I/O exceptions inherit from it.', example: 'import os\ntry:\n    os.remove(\'no_such_file.txt\')\nexcept OSError as e:\n    print("OSError:", e)\n\n# results:\n# OSError: [Errno 2] No such file or directory: \'no_such_file.txt\'' },
  { token: 'OverflowError', type: 'builtin', description: 'Raised when a result is too large to be represented (e.g., certain math functions on huge inputs).', example: 'import math\ntry:\n    math.exp(1000)\nexcept OverflowError as e:\n    print("Overflow:", e)\n\n# results:\n# Overflow: math range error' },
  { token: 'pass', type: 'keyword', description: 'A no-op placeholder statement; it does nothing.', example: 'def todo():\n    pass\nprint(\'after pass\')\n\n# results:\n# after pass' },
  { token: 'PendingDeprecationWarning', type: 'builtin', description: 'Feature is planned to be deprecated in the future (less commonly shown by default).', example: 'import warnings\nwarnings.warn("This will be deprecated", PendingDeprecationWarning)\n\n# results:\n# <stdin>:1: PendingDeprecationWarning: This will be deprecated' },
  { token: 'PermissionError', type: 'builtin', description: 'Operation lacked the required permissions (e.g., writing to a protected file or directory).', example: 'try:\n    raise PermissionError("not allowed")\nexcept PermissionError as e:\n    print(type(e).__name__, e)\n\n# results:\n# PermissionError not allowed' },
  { token: 'pow', type: 'builtin', description: 'Raises a number to a power. With three arguments, `pow(base, exp, mod)` computes `(base ** exp) % mod` efficiently.', example: 'print(pow(2, 5))        # 2**5\nprint(pow(2, 5, 3))     # (2**5) % 3\n\n# results:\n# 32\n# 2' },
  { token: 'print', type: 'builtin', description: 'Writes text to standard output, converting objects to strings. Supports `sep` (separator), `end` (line ending), `file`, and `flush` parameters.', example: 'print("A", "B", "C", sep=", ")\nprint("no newline", end="...")\nprint("done")\n\n# results:\n# A, B, C\n# no newline...done' },
  { token: 'property', type: 'builtin', description: 'Creates managed attributes. Lets you define getters/setters with attribute access syntax, enabling validation or computed values.', example: 'class Celsius:\n    def __init__(self, temp):\n        self._temp = temp\n\n    @property\n    def temp(self):\n        return self._temp\n\n    @temp.setter\n    def temp(self, value):\n        if value < -273.15:\n            raise ValueError(\'below absolute zero\')\n        self._temp = value\n\nc = Celsius(0)\nprint(c.temp)\nc.temp = 25\nprint(c.temp)\n\n# results:\n# 0\n# 25' },
  { token: 'raise', type: 'keyword', description: 'Raises an exception to signal an error or unusual condition.', example: 'try:\n    raise ValueError(\'bad value\')\nexcept ValueError as e:\n    print(e)\n\n# results:\n# bad value' },
  { token: 'range', type: 'builtin', description: 'An immutable sequence of numbers defined by start, stop, and step. Efficiently represents arithmetic progressions without storing all numbers at once.', example: 'r = range(2, 10, 2)\nprint(list(r))\nprint(r[1], r[-1])\nprint(len(r))\n\n# results:\n# [2, 4, 6, 8]\n# 4 8\n# 4' },
  { token: 'RecursionError', type: 'builtin', description: 'Maximum recursion depth exceeded, usually due to infinite or very deep recursion.', example: 'def recurse():\n    return recurse()\n\ntry:\n    recurse()\nexcept RecursionError as e:\n    print("RecursionError:", e)\n\n# results:\n# RecursionError: maximum recursion depth exceeded' },
  { token: 'ReferenceError', type: 'builtin', description: 'Accessing a weak reference proxy after the referent has been garbage-collected.', example: 'import weakref\nclass A: pass\na = A()\np = weakref.proxy(a)\ndel a\ntry:\n    print(p)\nexcept ReferenceError as e:\n    print("ReferenceError:", e)\n\n# results:\n# ReferenceError: weakly-referenced object no longer exists' },
  { token: 'repr', type: 'builtin', description: 'Returns an unambiguous string representation of an object (ideally valid Python to recreate it). Used for debugging.', example: 'print(repr(\'hello\'))\nprint(repr([1, 2, 3]))\n\n# results:\n# \'hello\'\n# [1, 2, 3]' },
  { token: 'ResourceWarning', type: 'builtin', description: 'Warns about resource usage (e.g., unclosed files) that may lead to problems.', example: 'import warnings\nwarnings.warn("Resource may be unclosed", ResourceWarning)\n\n# results:\n# <stdin>:1: ResourceWarning: Resource may be unclosed' },
  { token: 'return', type: 'keyword', description: 'Exits a function and sends a value back to the caller.', example: 'def add(a, b):\n    return a + b\nprint(add(3, 4))\n\n# results:\n# 7' },
  { token: 'reversed', type: 'builtin', description: 'Returns a reverse iterator over a sequence. The object must support random access or define a `__reversed__` method.', example: 'for x in reversed([1, 2, 3]):\n    print(x)\n\n# results:\n# 3\n# 2\n# 1' },
  { token: 'round', type: 'builtin', description: 'Rounds a number to the nearest integer, or to `ndigits` decimal places if provided. Uses “banker’s rounding” for .5 cases.', example: 'print(round(3.14159, 2))\nprint(round(7/2))\n\n# results:\n# 3.14\n# 4' },
  { token: 'RuntimeError', type: 'builtin', description: 'Generic error that doesn’t fit other categories.', example: 'try:\n    raise RuntimeError("unexpected state")\nexcept RuntimeError as e:\n    print("RuntimeError:", e)\n\n# results:\n# RuntimeError: unexpected state' },
  { token: 'RuntimeWarning', type: 'builtin', description: 'Warning for dubious runtime behavior (e.g., numerics, overflow to inf, etc.).', example: 'import warnings\nwarnings.warn("Suspicious runtime behavior", RuntimeWarning)\n\n# results:\n# <stdin>:1: RuntimeWarning: Suspicious runtime behavior' },
  { token: 'set', type: 'builtin', description: 'An unordered collection of unique, hashable items. Supports fast membership tests and set algebra like union, intersection, and difference.', example: 'a = {1, 2, 2, 3}\nb = {3, 4}\nprint(a)                 # duplicates removed\nprint(a | b, a & b, a - b)\n\n# results:\n# {1, 2, 3}\n# {1, 2, 3, 4} {3} {1, 2}' },
  { token: 'setattr', type: 'builtin', description: 'Sets an attribute on an object by name (creates it if it doesn’t exist).', example: 'class Empty: pass\ne = Empty()\nsetattr(e, \'name\', \'Ada\')\nprint(e.name)\n\n# results:\n# Ada' },
  { token: 'slice', type: 'builtin', description: 'Represents a slice specification with `start`, `stop`, and `step`. Useful for programmatic slicing on sequences and for code clarity.', example: 's = slice(1, 5, 2)\ndata = [0, 1, 2, 3, 4, 5, 6]\nprint(data[s])\nprint(s.start, s.stop, s.step)\n\n# results:\n# [1, 3]\n# 1 5 2' },
  { token: 'sorted', type: 'builtin', description: 'Returns a new sorted list from any iterable. Supports `key` functions for custom sorting and `reverse=True` for descending order.', example: 'nums = [3, 1, 4, 1]\nprint(sorted(nums))\nprint(sorted([\'pear\', \'apple\', \'banana\'], key=len))\nprint(sorted(nums, reverse=True))\n\n# results:\n# [1, 1, 3, 4]\n# [\'pear\', \'apple\', \'banana\']\n# [4, 3, 1, 1]' },
  { token: 'staticmethod', type: 'builtin', description: 'Decorator that marks a method as a plain function stored on a class. It does not receive `self` or `cls` automatically.', example: 'class Math:\n    @staticmethod\n    def add(x, y):\n        return x + y\n\nprint(Math.add(5, 3))\n\n# results:\n# 8' },
  { token: 'StopAsyncIteration', type: 'builtin', description: 'Raised by asynchronous iterators to signal completion. `async for` handles this automatically.', example: 'import asyncio\n\nasync def agen():\n    for i in range(2):\n        yield i\n\nasync def main():\n    it = agen().__aiter__()\n    print(await it.__anext__())\n    print(await it.__anext__())\n    try:\n        print(await it.__anext__())\n    except StopAsyncIteration:\n        print("done")\n\n# asyncio.run(main())\n\n# results:\n# 0\n# 1\n# done' },
  { token: 'StopIteration', type: 'builtin', description: 'Raised by iterators to signal that no more items are available. `for` loops handle this automatically.', example: 'it = iter([1, 2])\ntry:\n    print(next(it))\n    print(next(it))\n    print(next(it))\nexcept StopIteration:\n    print("End of iterator")\n\n# results:\n# 1\n# 2\n# End of iterator' },
  { token: 'str', type: 'builtin', description: 'The text type for Unicode strings. Supports slicing, searching, and many helpful methods like `upper`, `lower`, `split`, and `join`.', example: 'text = "Hello, world"\nprint(len(text), text.upper())\nprint("->".join(["a", "b", "c"]))\n\n# results:\n# 12 HELLO, WORLD\n# a->b->c' },
  { token: 'sum', type: 'builtin', description: 'Adds numbers in an iterable, optionally starting from a `start` value. Works with any iterable of numbers.', example: 'print(sum([1, 2, 3]))\nprint(sum((1, 2, 3), 10))  # start value 10\n\n# results:\n# 6\n# 16' },
  { token: 'super', type: 'builtin', description: 'Returns a proxy to delegate attribute access to a parent class. Commonly used to call parent methods in overrides.', example: 'class Parent:\n    def greet(self):\n        print(\'Hello from Parent\')\n\nclass Child(Parent):\n    def greet(self):\n        super().greet()\n        print(\'Hello from Child\')\n\nChild().greet()\n\n# results:\n# Hello from Parent\n# Hello from Child' },
  { token: 'SyntaxError', type: 'builtin', description: 'The parser found invalid Python syntax.', example: 'try:\n    eval(\'x === x\')\nexcept SyntaxError as e:\n    print("SyntaxError:", e.msg)\n\n# results:\n# SyntaxError: invalid syntax' },
  { token: 'SyntaxWarning', type: 'builtin', description: 'Warning about dubious Python syntax that is legal but potentially confusing.', example: 'import warnings\nwarnings.warn("Questionable syntax", SyntaxWarning)\n\n# results:\n# <stdin>:1: SyntaxWarning: Questionable syntax' },
  { token: 'SystemError', type: 'builtin', description: 'Indicates an internal interpreter error occurred (rare). Usually reported along with a bug report message.', example: 'try:\n    raise SystemError("interpreter problem")\nexcept SystemError as e:\n    print(type(e).__name__, e)\n\n# results:\n# SystemError interpreter problem' },
  { token: 'SystemExit', type: 'builtin', description: 'Raised by `sys.exit()` to exit a program. Can be caught to run cleanup, but usually allowed to propagate.', example: 'import sys\ntry:\n    sys.exit(2)\nexcept SystemExit as e:\n    print("Exiting with code", e.code)\n\n# results:\n# Exiting with code 2' },
  { token: 'TabError', type: 'builtin', description: 'Inconsistent use of tabs and spaces in indentation.', example: 'code = \'def f():\\n\\tprint(1)\\n    print(2)\\n\'\ntry:\n    compile(code, \'<string>\', \'exec\')\nexcept TabError as e:\n    print("TabError:", e.msg)\n\n# results:\n# TabError: inconsistent use of tabs and spaces in indentation' },
  { token: 'True', type: 'keyword', description: 'Boolean true value. Used in conditions and logic to represent “yes”/“on”.', example: 'if True:\n    print("always runs")\n\n# results:\n# always runs' },
  { token: 'True_builtin', type: 'builtin', description: 'The boolean value for "yes" or "on". `True` is a singleton of type `bool` (a subclass of `int`). In conditions, `True` is treated as truthy. Many other values are also truthy (most non-empty objects and non-zero numbers), but they are not the same object as `True`.', example: 'print(True)\nprint(isinstance(True, bool))\nprint(True == 1, True is 1)  # equal in value to 1, but not the same object\n\nif True:\n    print("runs")\n\n# results:\n# True\n# True\n# True False\n# runs' },
  { token: 'try', type: 'keyword', description: 'Wraps code that might raise exceptions; pair with `except`, optionally `else` and `finally`.', example: 'try:\n    1/0\nexcept ZeroDivisionError:\n    print(\'oops\')\n\n# results:\n# oops' },
  { token: 'tuple', type: 'builtin', description: 'An ordered, immutable sequence. Efficient for fixed collections of items. Supports indexing, slicing, and unpacking.', example: 't = (1, "a", 3.0)\nx, y, z = t\nprint(t, x, y, z)\nprint(t + (4,), t * 2)\n\n# results:\n# (1, \'a\', 3.0) 1 a 3.0\n# (1, \'a\', 3.0, 4) (1, \'a\', 3.0, 1, \'a\', 3.0)' },
  { token: 'type', type: 'builtin', description: 'The metaclass of most Python classes. Called with one argument, returns an object’s type. Called with three arguments, creates a new class dynamically.', example: 'print(type(3) is int)\n\ndef _init(self, x, y):\n    self.x = x\n    self.y = y\n\nPoint = type("Point", (object,), {"__init__": _init})\np = Point(2, 5)\nprint(isinstance(p, Point), p.x, p.y)\n\n# results:\n# True\n# True 2 5' },
  { token: 'TypeError', type: 'builtin', description: 'Operation or function applied to an object of inappropriate type.', example: 'try:\n    \'2\' + 2\nexcept TypeError as e:\n    print("TypeError:", e)\n\n# results:\n# TypeError: can only concatenate str (not "int") to str' },
  { token: 'UnboundLocalError', type: 'builtin', description: 'Subclass of `NameError` for referencing a local variable before it’s assigned.', example: 'def f():\n    try:\n        print(x)\n        x = 2\n    except UnboundLocalError as e:\n        print("UnboundLocalError:", e)\n\nf()\n\n# results:\n# UnboundLocalError: cannot access local variable \'x\' where it is not associated with a value' },
  { token: 'UnicodeDecodeError', type: 'builtin', description: 'Error while decoding bytes to text (byte sequence invalid for the target encoding).', example: 'try:\n    b\'\\xff\'.decode(\'utf-8\')\nexcept UnicodeDecodeError as e:\n    print("UnicodeDecodeError:", e.reason)\n\n# results:\n# UnicodeDecodeError: invalid start byte' },
  { token: 'UnicodeEncodeError', type: 'builtin', description: 'Error while encoding text to bytes (character not representable in the target encoding).', example: 'try:\n    \'€\'.encode(\'ascii\')\nexcept UnicodeEncodeError as e:\n    print("UnicodeEncodeError:", e.reason)\n\n# results:\n# UnicodeEncodeError: ordinal not in range(128)' },
  { token: 'UnicodeError', type: 'builtin', description: 'Base class for Unicode-related encoding/decoding/translation errors.', example: 'try:\n    \'€\'.encode(\'ascii\')\nexcept UnicodeError as e:\n    print(type(e).__name__)  # specific subclass\n\n# results:\n# UnicodeEncodeError' },
  { token: 'UnicodeTranslateError', type: 'builtin', description: 'Error during translating Unicode (rare; occurs in some codecs or custom translators).', example: 'try:\n    raise UnicodeTranslateError(\'codec\', \'text\', 0, 1, \'translation failed\')\nexcept UnicodeTranslateError as e:\n    print(type(e).__name__, e.reason)\n\n# results:\n# UnicodeTranslateError translation failed' },
  { token: 'UnicodeWarning', type: 'builtin', description: 'Warns about unicode-related issues that are not errors but may be surprising.', example: 'import warnings\nwarnings.warn("Unicode oddity", UnicodeWarning)\n\n# results:\n# <stdin>:1: UnicodeWarning: Unicode oddity' },
  { token: 'UserWarning', type: 'builtin', description: 'Default category for `warnings.warn()` when no specific category is provided.', example: 'import warnings\nwarnings.warn("Something to note")\n\n# results:\n# <stdin>:1: UserWarning: Something to note' },
  { token: 'ValueError', type: 'builtin', description: 'Argument has the correct type but an invalid value.', example: 'try:\n    int(\'abc\')\nexcept ValueError as e:\n    print("ValueError:", e)\n\n# results:\n# ValueError: invalid literal for int() with base 10: \'abc\'' },
  { token: 'vars', type: 'builtin', description: 'Returns the `__dict__` attribute of an object (a dict of its writable attributes). With no argument, acts like `locals()`.', example: 'class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\np = Point(2, 5)\nprint(vars(p))\n\n# results:\n# {\'x\': 2, \'y\': 5}' },
  { token: 'Warning', type: 'builtin', description: 'Base class for all warning categories.', example: 'import warnings\nwarnings.warn("This is a general warning", Warning)\n\n# results:\n# <stdin>:1: Warning: This is a general warning' },
  { token: 'while', type: 'keyword', description: 'Repeats a block while a condition is true.', example: 'i = 0\nwhile i < 2:\n    print(i)\n    i += 1\n\n# results:\n# 0\n# 1' },
  { token: 'with', type: 'keyword', description: 'Enters a context manager that sets up and tears down resources automatically.', example: 'with open(\'tmp.txt\', \'w\') as f:\n    f.write(\'hi\')\nprint(\'done\')\n\n# results:\n# done' },
  { token: 'yield', type: 'keyword', description: 'Produces a value from a generator function and pauses its state until the next request.', example: 'def gen():\n    yield 1\n    yield 2\n\nprint(list(gen()))\n\n# results:\n# [1, 2]' },
  { token: 'ZeroDivisionError', type: 'builtin', description: 'Raised when dividing or taking modulo by zero.', example: 'try:\n    10 / 0\nexcept ZeroDivisionError as e:\n    print("ZeroDivisionError:", e)\n\n# results:\n# ZeroDivisionError: division by zero' },
  { token: 'zip', type: 'builtin', description: 'Aggregates items from multiple iterables into tuples, stopping at the shortest. Useful for pairing related sequences.', example: 'names = [\'Alice\', \'Bob\']\nages = [25, 30]\nprint(list(zip(names, ages)))\n\n# results:\n# [(\'Alice\', 25), (\'Bob\', 30)]' },
  { token: '{', type: 'operator', description: 'Brace. Dict and set literals; also used for f-string expressions.', example: 'print({\'a\': 1, \'b\': 2})\nprint({1, 2, 2})\n\n# results:\n# {\'a\': 1, \'b\': 2}\n# {1, 2}' },
  { token: '|', type: 'operator', description: 'Bitwise OR. Sets a bit if it is set in either operand.', example: 'print(5 | 3)\n\n# results:\n# 7' },
  { token: '|=', type: 'operator', description: 'In-place bitwise OR and assign.', example: 'x = 1  # 0b001\nx |= 4 # 0b100\nprint(x)\n\n# results:\n# 5' },
  { token: '}', type: 'operator', description: 'Closing brace.', example: 'd = {\'x\': 1}\nprint(\'x\' in d)\n\n# results:\n# True' },
  { token: '~', type: 'operator', description: 'Bitwise NOT (invert). For integers, `~x` equals `-(x+1)`.', example: 'print(~5)\n\n# results:\n# -6' }
];
